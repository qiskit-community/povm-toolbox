# (C) Copyright IBM 2024.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""TODO."""

from __future__ import annotations

import dataclasses
import importlib
from dataclasses import dataclass
from typing import Any

import numpy as np
from qiskit import qasm3
from qiskit.circuit import QuantumCircuit

from ..povm_implementation import POVMImplementation


@dataclass
class POVMMetadata:
    """The bare metadata container for POVM sampling results."""

    povm_implementation: POVMImplementation
    """The POVM implementation which produced the results to which this metadata belongs."""

    composed_circuit: QuantumCircuit
    """The quantum circuit which produced the results to which this metadata belongs.

    This circuit is the composition of the quantum circuit specified by a PUB and the
    measurement circuit generated by the POVM implementation used. This is the quantum
    circuit that is eventually sent to the internal :class:`.BaseSamplerV2`.
    """

    def __repr__(self):
        """Implement the default ``__repr__`` method to avoid printing large objects.

        E.g., the attribute ``composed_circuit`` is a quantum circuit. With the default
        ``dataclass.__repr__``, it would be entirely drawn. As this is recursive,
        the full circuit would be printed when printing the :class:`.PrimitiveResult`
        object returned by the :meth:`.POVMSampler.run` method. The redefinition
        here avoids this.
        """
        lst_fields = []
        for field in dataclasses.fields(self):
            f_name = field.name
            f_val = getattr(self, field.name)
            if isinstance(f_val, np.ndarray):
                f_val = f'np.ndarray<{",".join(map(str, f_val.shape))}>'
            elif isinstance(f_val, QuantumCircuit):
                f_val = f_val.__repr__()
            lst_fields.append((f_name, f_val))
        f_repr = ", ".join(f"{name}={value}" for name, value in lst_fields)
        return f"{self.__class__.__name__}({f_repr})"

    def to_dict(self) -> dict[str, Any]:
        """Convert ``self`` into a serializable :class:`dict` object.

        This dictionary contains all the information needed to build a
        copy of ``self``.
        """
        povm_module = self.povm_implementation.__module__
        povm_class = self.povm_implementation.__class__.__name__
        povm_kwargs = self.povm_implementation.kwargs
        composed_circuit_qasm3 = qasm3.dumps(self.composed_circuit)

        metadata_kwargs = {
            "povm_module": povm_module,
            "povm_class": povm_class,
            "povm_kwargs": povm_kwargs,
            "composed_circuit_qasm3": composed_circuit_qasm3,
        }

        return {
            "metadata_module": self.__module__,
            "metadata_class": self.__class__.__name__,
            "metadata_as_dict": metadata_kwargs,
        }

    @classmethod
    def _kwargs_from_dict(cls, metadata_as_dict: dict[str, Any]) -> dict[str, Any]:
        """Convert a serializable dictionary into arguments compatible with :meth:.`POVMMetadata.__init__`.

        Args:
            metadata_as_dict: metadata stored as a serializable :class:.dict` object.

        Returns:
            dictionary of key-word arguments compatible with :meth:.`POVMMetadata.__init__`.
        """
        povm_module = importlib.import_module(metadata_as_dict["povm_module"])
        povm_class = getattr(povm_module, metadata_as_dict["povm_class"])
        povm_kwargs = metadata_as_dict["povm_kwargs"]
        povm_implementation = povm_class(**povm_kwargs)
        composed_circuit = qasm3.loads(metadata_as_dict["composed_circuit_qasm3"])
        return {"povm_implementation": povm_implementation, "composed_circuit": composed_circuit}

    @staticmethod
    def from_dict(dictionary: dict[str, Any]) -> POVMMetadata:
        """Return a :class:`.POVMMetadata` object built from the information stored in a serializable dictionary.

        Args:
            dictionary: stores all the information necessary to instantiate a :class:`.POVMMetadata` (or
                a sub-class) object.

        Returns:
            A :class:`.POVMMetadata` built from the information stored in ``dictionary``.
        """
        metadata_module = importlib.import_module(dictionary["metadata_module"])
        metadata_class = getattr(metadata_module, dictionary["metadata_class"])
        metadata: POVMMetadata = metadata_class(
            **metadata_class._kwargs_from_dict(dictionary["metadata_as_dict"])
        )
        return metadata
